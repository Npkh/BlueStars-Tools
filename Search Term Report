{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNQiKwCEIFKymiThM4lj8Tt",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Npkh/BlueStars-Tools/blob/main/B%C3%A1o_c%C3%A1o_Search_Term.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kWlduQ9MRt_N"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from google.colab import files"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ad_type = input(\"Nhập ad_type tương ứng: \")\n",
        "\n",
        "if ad_type == \"SP\":\n",
        "    ad_type = \"Sponsor Product\"\n",
        "elif ad_type == \"SB\":\n",
        "    ad_type = \"Sponsor Brands\"\n",
        "elif ad_type == \"SD\":\n",
        "    ad_type = \"Sponsor Display\"\n",
        "\n",
        "market = input(\"Chọn thị trường: \")\n",
        "file_name_output = input(\"Nhập tên file Excel muốn lưu: \")\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "id": "apcWkhYlSAN7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "outputId": "0879087d-7338-401e-9ee9-5a6759d5c55b"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Nhập ad_type tương ứng: SD\n",
            "Chọn thị trường: Canada\n",
            "Nhập tên file Excel muốn lưu: a\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-893df044-5754-48fb-8364-b6589d63e01a\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-893df044-5754-48fb-8364-b6589d63e01a\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Sponsored Display Targeting report t8.2024.xlsx to Sponsored Display Targeting report t8.2024 (1).xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfs = {}\n",
        "\n",
        "for file_name in uploaded.keys():\n",
        "    if file_name.endswith('.csv'):\n",
        "        dfs[file_name] = pd.read_csv(file_name)\n",
        "    elif file_name.endswith('.xlsx') or file_name.endswith('.xls'):\n",
        "        xls = pd.ExcelFile(file_name, engine='openpyxl')\n",
        "        default_sheet_name = xls.sheet_names[0]\n",
        "        dfs[file_name] = pd.read_excel(file_name, sheet_name=default_sheet_name, engine='openpyxl')\n",
        "\n",
        "first_file_name = next(iter(dfs))\n",
        "data = dfs[first_file_name]"
      ],
      "metadata": {
        "id": "Ra-YCfuiSRgw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3f5d33da-0bcd-4f4a-c14d-6883b0a08d0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/openpyxl/styles/stylesheet.py:237: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "product_id = pd.read_html('https://docs.google.com/spreadsheets/d/e/2PACX-1vQKItZA2bNZCY2yD52UEunCjkuq8e9yDuHLQzLqbOvLy13GeJWLWFmujTCRbrBVNA/pubhtml?gid=678803432&single=true', skiprows=1)[0]\n",
        "product_id = product_id.iloc[1:, 1:]"
      ],
      "metadata": {
        "id": "pBABIsSgSXrc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "product_id['SKU'] = product_id['SKU'].astype(str)\n",
        "def get_matching_sku(campaign_name):\n",
        "    for sku in product_id['SKU']:\n",
        "        if sku in campaign_name:\n",
        "            return sku\n",
        "    return None\n",
        "\n",
        "data['SKU'] = data['Campaign Name'].apply(get_matching_sku)\n",
        "data['Product Number'] = np.nan\n",
        "data['SKU'] = data['SKU'].astype(str)"
      ],
      "metadata": {
        "id": "VtFE4djOScGs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "trim_column_names = lambda x: x.strip()\n",
        "data.rename(columns=trim_column_names, inplace=True)\n",
        "\n",
        "if ad_type == 'Sponsor Product':\n",
        "    data.rename(columns={\n",
        "        '7 Day Total Orders (#)':'Orders',\n",
        "        '7 Day Total Units (#)': 'Units',\n",
        "        '7 Day Total Sales':'Sales'}, inplace=True)\n",
        "\n",
        "elif ad_type == 'Sponsor Display':\n",
        "    data.rename(columns={\n",
        "        '14 Day Total Orders (#)':'Orders',\n",
        "        '14 Day Total Units (#)': 'Units',\n",
        "        '14 Day Detail Page Views (DPV)': 'Detail Page Views',\n",
        "        '14 Day New-to-brand Orders (#)': 'New-to-brand Orders',\n",
        "        '14 Day New-to-brand Sales': 'New-to-brand Sales',\n",
        "        '14 Day Total Sales':'Sales'}, inplace=True)\n",
        "\n",
        "elif ad_type == 'Sponsor Brands':\n",
        "    data.rename(columns={\n",
        "        '14 Day Total Orders (#)':'Orders',\n",
        "        '14 Day Total Units (#)': 'Units',\n",
        "        '14 Day Total Sales':'Sales'}, inplace=True)"
      ],
      "metadata": {
        "id": "UxR2ROZ8SdQR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if ad_type == \"Sponsor Product\":\n",
        "  def classify_campaign_name(campaign_name):\n",
        "    if \"Auto\" in campaign_name:\n",
        "        return \"Auto\"\n",
        "    elif \"Research\" in campaign_name:\n",
        "        return \"Research\"\n",
        "    elif \"Performance\" in campaign_name:\n",
        "        return \"Performance\"\n",
        "    elif \"term\" in campaign_name:\n",
        "        return \"search terms\"\n",
        "    elif \" TD\" in campaign_name:\n",
        "        return \"TD\"\n",
        "    elif \"Broad\" in campaign_name:\n",
        "        return \"SP Broad\"\n",
        "    elif \"Exact\" in campaign_name:\n",
        "        return \"SP Exact\"\n",
        "    elif \"TOS\" in campaign_name:\n",
        "        return \"TOS\"\n",
        "    elif \" PP\" in campaign_name:\n",
        "        return \"PP\"\n",
        "    elif \" PT\" in campaign_name:\n",
        "        return \"SP PT\"\n",
        "    elif \"query\" in campaign_name:\n",
        "        return \"SP query\"\n",
        "    else:\n",
        "        return \"SP Phrase\"\n",
        "\n",
        "elif ad_type == 'Sponsor Display':\n",
        "    def classify_campaign_name(campaign_name):\n",
        "        if \"SD PT\" in campaign_name:\n",
        "            return \"SD PT\"\n",
        "        elif \"SD views\" in campaign_name:\n",
        "            return \"SD views\"\n",
        "\n",
        "elif ad_type == 'Sponsor Brands':\n",
        "    def classify_campaign_name(campaign_name):\n",
        "        if \"Store\" in campaign_name:\n",
        "            return \"SB Store\"\n",
        "        elif \"Video Ads Broad\" in campaign_name:\n",
        "            return \"SB Video Broad\"\n",
        "        elif \"Video Ads Exact\" in campaign_name:\n",
        "            return \"SB Video Exact\"\n",
        "        elif \"Video Ads Phrase\" in campaign_name:\n",
        "            return \"SB Video Phrase\"\n",
        "        elif \" Video Ads PT\" in campaign_name:\n",
        "            return \"SB Video PT\"\n",
        "        else:\n",
        "            return \"SB\"\n",
        "\n",
        "data['Campaign Form'] = data['Campaign Name'].apply(classify_campaign_name)"
      ],
      "metadata": {
        "id": "LfV6JN8DSeXW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if ad_type != 'Sponsor Display':\n",
        "  data['Customer Search Term'] = data['Customer Search Term'].astype(str)\n",
        "\n",
        "data['Targeting'] = data['Targeting'].astype(str)\n",
        "def keyword_words(row):\n",
        "    if row['Search terms Type'] == 'Keyword' and row['Targeting'] != '*':\n",
        "        return len(row['Targeting'].split())\n",
        "    else:\n",
        "        return 0\n",
        "\n",
        "\n",
        "def search_terms_words(row):\n",
        "    if row['Search terms Type'] == 'Keyword':\n",
        "        return len(row['Customer Search Term'].split())\n",
        "    else:\n",
        "        return 0\n",
        "\n",
        "if ad_type == 'Sponsor Product' or ad_type == 'Sponsor Brands':\n",
        "    data['Search terms Type'] = data['Customer Search Term'].apply(lambda x: \"ASIN\" if x[:2] == \"b0\" and len(x) == 10 else \"Keyword\")\n",
        "    data['Keyword Words'] = data.apply(keyword_words, axis=1)\n",
        "    data['Search Terms Words'] = data.apply(search_terms_words, axis=1)"
      ],
      "metadata": {
        "id": "OB4Tt_0wSfhd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['Campaign Type'] = ad_type\n",
        "data['Brand'] = 'BlueStars'\n",
        "data['Market'] = market\n",
        "\n",
        "if market== \"CA\":\n",
        "  data['Spend'] = data['Spend'] * 0.76\n",
        "  data['Sales'] = data['Sales'] * 0.76\n",
        "\n",
        "if ad_type == \"Sponsor Product\" or ad_type == 'Sponsor Brands':\n",
        "    columns = ['Start Date', 'End Date', 'Portfolio name',\n",
        "                  'Currency','Campaign Name','Ad Group Name',\n",
        "                  'Targeting','Match Type','Customer Search Term',\n",
        "                  'Impressions','Clicks','Spend','Sales','Orders',\n",
        "                  'Units','Campaign Type','Campaign Form','Product Number',\n",
        "                  'SKU','Search terms Type','Keyword Words','Search Terms Words','Brand','Market']\n",
        "\n",
        "elif ad_type == 'Sponsor Display':\n",
        "    columns = ['Start Date','End Date','Currency',\n",
        "                  'Campaign Name','Portfolio name',\n",
        "                  'Cost Type','Ad Group Name','Targeting',\n",
        "                  'Bid Optimization','Impressions','Viewable Impressions',\n",
        "                  'Clicks','Detail Page Views','Spend','Orders','Units','Sales',\n",
        "                  'New-to-brand Orders','New-to-brand Sales','Campaign Type',\n",
        "                  'Campaign Form','Product Number','SKU','Brand','Market']"
      ],
      "metadata": {
        "id": "P0BTNj4ZSgsy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "final_data = data[columns]\n",
        "with pd.ExcelWriter(file_name_output + \".xlsx\") as writer:\n",
        "    final_data.to_excel(writer, sheet_name='Sheet1', index=False)\n",
        "\n",
        "files.download(file_name_output + \".xlsx\")"
      ],
      "metadata": {
        "id": "UKLaZu7KSk7H",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "cdb525be-df23-4675-8fb7-18957a1f3907"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_be77b7e7-04ee-40bf-a845-1ace12e2aaf5\", \"a.xlsx\", 511954)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}
