{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Npkh/BlueStars-Tools/blob/main/Auto_Research_D%C3%B2ng_S%E1%BA%A3n_ph%E1%BA%A9m.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J--qabznlBTm"
      },
      "source": [
        "# **Cách Thực Hiện Auto Research Sản Phẩm**\n",
        "*   B1: Tải đầy đủ 2 file SellerSprite(unit) và SellerSprite(Sales) về và đưa vào chung 1 file excel, để data ở 3 sheet khác nhau.\n",
        "\n",
        "*   B2: Đổi tên các các sheet tương ứng như sau:\n",
        "    - Data của \"SellerSprite(unit)\" thì đặt tên sheet là \"market\"\n",
        "    - Data của \"SellerSprite(sales)\" thì đặt tên sheet là \"trend\"\n",
        "\n",
        "*   B3: Lưu và upload file này lên trên đoạn code này, bên dưới có option \"Upload file\"\n",
        "\n",
        "*   B4: Kết quả tải về cần format lại định dạng một số cột ở sheet \"2023 Market\" như:\n",
        "  - Gross Margin, Rating Velocity sang dạng %\n",
        "\n",
        "*   B5: Filter \"BuyBox Location\" blank để tìm kiếm thủ công và điền thêm\n",
        "\n",
        "***Lưu Ý***:\n",
        "*   Đoạn code sẽ tự động chạy và tải về kết quả, nếu không có kết quả tải về thì đoạn code đã bị lỗi, cần check lại các bước đã làm đúng hay chưa. Thời gian chạy code khoảng 30s\n",
        "\n",
        "*   Nếu chẳng may xóa một đoạn code nào đó, reload lại trang này để khôi phục code\n",
        "\n",
        "*   Phải đăng nhập google drive mới có thể chạy Run all\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BxDSm5wEfPql"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from datetime import datetime\n",
        "from openpyxl import load_workbook\n",
        "from google.colab import files\n",
        "import re"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rLXnuxhJfpzV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ff8a2d50-57c0-4744-9d41-6f5948b6f1da"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Hãy nhập tên Product Line: Tubing & Hoses\n",
            "Hãy nhập tên Main Category: \n",
            "Nhập tên file Excel muốn lưu: Tubing & Hoses\n"
          ]
        }
      ],
      "source": [
        "product_line = input(\"Hãy nhập tên Product Line: \")\n",
        "main_category = input(\"Hãy nhập tên Main Category: \")\n",
        "file_name_output = input(\"Nhập tên file Excel muốn lưu: \")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QnHzi9rofQg4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "outputId": "4251473b-8553-4975-bbee-a6391fc2468a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-46735b0f-f5f0-4bbb-800e-2df4d62a9b1b\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-46735b0f-f5f0-4bbb-800e-2df4d62a9b1b\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "uploaded = files.upload()\n",
        "dfs = {}\n",
        "\n",
        "for file_name in uploaded.keys():\n",
        "    xls = pd.ExcelFile(file_name)\n",
        "    sheet_names = xls.sheet_names\n",
        "\n",
        "    for sheet_name in sheet_names:\n",
        "        dfs[sheet_name] = pd.read_excel(file_name, sheet_name=sheet_name)\n",
        "\n",
        "sheet2 = dfs['US']\n",
        "sheet3 = dfs['History Amounts']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-lY2jBi2Zg4H"
      },
      "outputs": [],
      "source": [
        "sellersprite_unit = sheet2[['ASIN', 'Product Title', 'Brand', 'Price($)',\n",
        "                            'Monthly Sales', 'Monthly revenue($)', 'Date Available', 'Rating',\n",
        "                            'Ratings', 'Category BSR' , 'Fulfillment', 'Sellers',\n",
        "                            'Category', 'Dimensions', 'Weight.1', 'Rating Velocity',\n",
        "                            'Newly Ratings','Available days', 'Variations' ,'LQS',\n",
        "                            'BuyBox Location', 'Best Seller', \"Amazon's Choice\", 'New Release', 'A+', 'Video Introduction' ,\n",
        "                            'Sponsored Product', 'Brand Story', 'Sponsored Brands', 'Limited time deal',\n",
        "                            'Gross Margin', 'Sub-Category', 'BuyBox Type']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "F87eYjR5ZhIt"
      },
      "outputs": [],
      "source": [
        "sellersprite_unit.loc[(sellersprite_unit['BuyBox Type'] == 'AMZ') & sellersprite_unit['BuyBox Location'].isna(), 'BuyBox Location'] = 'US'\n",
        "\n",
        "sellersprite_unit[['Weight_copy', 'Weight_unit']] = sellersprite_unit['Weight.1'].astype(str).apply(lambda x: pd.Series(x.split()))\n",
        "sellersprite_unit['Weight_copy'] = sellersprite_unit['Weight_copy'].astype(float)\n",
        "sellersprite_unit['Weight_unit'] = sellersprite_unit['Weight_unit'].str.lower()\n",
        "\n",
        "def convert_weight(row):\n",
        "    if row['Weight_unit'] == \"ounces\":\n",
        "        return row['Weight_copy'] * 0.0625\n",
        "    elif row['Weight_unit'] == \"grams\":\n",
        "        return row['Weight_copy'] * 0.00220462262\n",
        "    elif row['Weight_unit'] == \"kilograms\":\n",
        "        return row['Weight_copy'] * 2.20462262\n",
        "    elif row['Weight_unit'] == \"milligrams\":\n",
        "        return row['Weight_copy'] * 0.00000220462\n",
        "    else:\n",
        "        return row['Weight_copy']\n",
        "\n",
        "# Apply conversion and set using .loc\n",
        "sellersprite_unit.loc[:, 'Weight_copy'] = sellersprite_unit.apply(convert_weight, axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "o_IxNaEIZhiN"
      },
      "outputs": [],
      "source": [
        "def extract_dimensions(x):\n",
        "    if \"inches\" in x:\n",
        "        # Remove \"inches\" and split by \"x\"\n",
        "        dimensions = x.replace(' inches', '').split('x')\n",
        "        # Convert to floats\n",
        "        dimensions = [float(dim.strip()) for dim in dimensions]\n",
        "    else:\n",
        "        # Split by \"x\" and extract floats\n",
        "        dimensions = re.findall(r'\\d+\\.\\d+\\.\\d+', x)\n",
        "        dimensions = [float(dim) for dim in dimensions]\n",
        "        # If there are less than 3 dimensions, assign NaN to missing dimensions\n",
        "        if len(dimensions) < 3:\n",
        "            dimensions.extend([np.nan] * (3 - len(dimensions)))\n",
        "        elif len(dimensions) > 3:\n",
        "            dimensions = dimensions[:3]\n",
        "    return dimensions\n",
        "\n",
        "# Apply the function using lambda\n",
        "sellersprite_unit['Dimensions'] = sellersprite_unit['Dimensions'].astype(str)\n",
        "sellersprite_unit[['Length (in)', 'Width (in)', 'Height (in)']] = sellersprite_unit['Dimensions'].apply(lambda x: extract_dimensions(x)).apply(pd.Series)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for col in range(sellersprite_unit.shape[1]):\n",
        "    for row in range(sellersprite_unit.shape[0]):\n",
        "        if sellersprite_unit.iloc[row, col] == 'Y':\n",
        "            sellersprite_unit.iloc[row, col] = sellersprite_unit.columns[col]"
      ],
      "metadata": {
        "id": "J5jAa16O3aEn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8LUNCL8Hf0rt"
      },
      "outputs": [],
      "source": [
        "market_research = sellersprite_unit.drop(['Dimensions', 'Weight.1', 'Weight_unit', 'BuyBox Type'], axis='columns')\n",
        "market_research.rename(columns={\"Product Title\": \"Product Name\", \"Price($)\": \"Price\",\n",
        "                                \"Monthly Sales\": \"Mo. Sales\", \"Monthly revenue($)\": \"Mo. Revenue\",\n",
        "                                \"Date Available\": \"Date First Available\", \"Ratings\": \"Review Number\",\n",
        "                                \"Category BSR\": \"Rank\", \"Fulfillment\": \"Seller Type\",\n",
        "                                \"Weight_copy\": \"Weight (lbs)\", \"Sub-Category\": \"Product Line\",\n",
        "                               'Best Seller':'Badge 1', \"Amazon's Choice\":'Badge 2', 'New Release':'Badge 3', 'A+':'Badge 4',\n",
        "                                'Video Introduction':'Badge 5' ,'Sponsored Product':'Badge 6', 'Brand Story':'Badge 7',\n",
        "                                'Sponsored Brands':'Badge 8', 'Limited time deal':'Badge 9'}, inplace=True)\n",
        "market_research['Tier'] = market_research.apply(\n",
        "    lambda x: 'Oversize' if (x['Length (in)'] > 13 or x['Width (in)'] > 13 or x['Height (in)'] > 13 or x['Weight (lbs)'] > 1) else 'Standard',\n",
        "    axis=1\n",
        ")\n",
        "\n",
        "market_research['D. Sales'] = round(market_research['Mo. Sales']/30,0)\n",
        "market_research['Product Line'] = product_line\n",
        "market_research['Weight (lbs)'] = round(market_research['Weight (lbs)'],2)\n",
        "market_research['Main Category'] = main_category"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "W6MelR10gUsX"
      },
      "outputs": [],
      "source": [
        "order = ['ASIN', 'Product Name', 'Brand', 'Price', 'Mo. Sales', 'D. Sales', 'Mo. Revenue',\n",
        "         'Date First Available', 'Rank', 'Seller Type',\n",
        "         'Sellers', 'Category', 'Tier', 'Length (in)', 'Width (in)',\n",
        "         'Weight (lbs)', 'Rating Velocity', 'Newly Ratings', 'Available days',\n",
        "         'Variations', 'BuyBox Location', 'Product Line', 'Rating', 'Review Number' , 'Badge 1', \"Badge 2\", 'Badge 3', 'Badge 4',\n",
        "         'Badge 5' ,'Badge 6', 'Badge 7', 'Badge 8', 'Badge 9', 'Height (in)', 'LQS', 'Gross Margin','Main Category']\n",
        "market_research = market_research[order]\n",
        "\n",
        "market_research.replace('Video Introduction', 'V', inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sheet3.drop(['Image', 'URL', 'Dominant Category'], axis=1, inplace=True)\n",
        "sellersprite_sales = sheet3.melt(id_vars=['ASIN', 'SKU', 'Product Title'], var_name='Date', value_name='Revenue')\n",
        "sellersprite_sales['Product Line'] = product_line"
      ],
      "metadata": {
        "id": "IzlmRXW_3e9I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YI75-Qa7hJ-z"
      },
      "outputs": [],
      "source": [
        "order2 = ['ASIN', 'SKU', 'Product Title', 'Product Line', 'Date', 'Revenue']\n",
        "sellersprite_sales = sellersprite_sales[order2]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7WotRCpFgY7U"
      },
      "outputs": [],
      "source": [
        "with pd.ExcelWriter(file_name_output + \".xlsx\") as writer:\n",
        "    market_research.to_excel(writer, sheet_name='2024 Market', index=False)\n",
        "    sellersprite_sales.to_excel(writer, sheet_name='2024 Trend', index=False)\n",
        "\n",
        "files.download(file_name_output + \".xlsx\")"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNrq8ZPZFKsOhrttJcx7ZvS",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
